package net.ryick.lightduino;

import android.app.Service;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothManager;
import android.bluetooth.BluetoothSocket;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Binder;
import android.os.IBinder;
import android.util.Log;
import android.widget.Toast;

import java.io.IOException;
import java.util.UUID;

public class WorkerService extends Service {
    private final static String TAG = "LightduinoWifiWorkerService";
    private final static String DEVICE = "20:13:12:05:03:09";
    private final static String BASE_UUID = "00001101-0000-1000-8000-00805F9B34FB";
    private final IBinder mBinder = new WorkerBinder();
    private boolean mThreadRun = false;
    private BluetoothSocket mBtSocket = null;
    private enum BtStatus {
        UNKNOWN,
        OFF,
        DISCONNECTED,
        CONNECTED
    };

    public WorkerService() {
        super();
        Log.d(TAG, "WorkerService");
    }

    @Override
    public void onCreate() {
        super.onCreate();
        Log.d(TAG, "onCreate");
        IntentFilter intentFilter = new IntentFilter(BluetoothAdapter.ACTION_STATE_CHANGED);
        registerReceiver(btReceiver, intentFilter);
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        unregisterReceiver(btReceiver);
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        Log.d(TAG, "onStartCommand");
        synchronized (this) {
            if (mThreadRun == false) {
                mThreadRun = true;
                new Thread(mTask).start();
            }
        }
        return START_STICKY;
    }

    @Override
    public IBinder onBind(Intent intent) {
        return mBinder;
    }

    public void switchOff() {
        Log.d(TAG, "switchOff");
        try {
            if(getBtStatus() == BtStatus.CONNECTED) {
                mBtSocket.getOutputStream().write("relay off".getBytes());
            } else {
                connectDevice();
            }
        } catch (IOException e) {
            e.printStackTrace();
            btCleanup();
        }
        mThreadRun = false;
    }

    public void switchOn() {
        Log.d(TAG, "switchOn");
        try {
            if (getBtStatus() == BtStatus.CONNECTED) {
                mBtSocket.getOutputStream().write("relay on".getBytes());
            } else {
                connectDevice();
            }
        } catch (IOException e) {
            e.printStackTrace();
            btCleanup();
        }
        mThreadRun = true;
        new Thread(mTask).start();
    }

    public BtStatus getBtStatus() {
        if (BluetoothAdapter.getDefaultAdapter().isEnabled() == false) {
            return BtStatus.OFF;
        } else if (BluetoothAdapter.getDefaultAdapter().isEnabled() &&
                mBtSocket != null &&
                mBtSocket.isConnected()) {
            return BtStatus.CONNECTED;
        } else {
            return BtStatus.DISCONNECTED;
        }
    }


    public class WorkerBinder extends Binder {
        WorkerService getService() {
            return WorkerService.this;
        }
    }

    private Runnable mTask = new Runnable() {
        @Override
        public void run() {
            long sleep = 10*1000L;
            while (WorkerService.this.mThreadRun) {
                Log.d(TAG, "doing stuff");
                try {
                    BtStatus status = getBtStatus();
                    if (status == BtStatus.CONNECTED) {
                        mBtSocket.getOutputStream().write("relay on".getBytes());
                        sleep = 10*1000L;
                    } else {
                        if (status == BtStatus.DISCONNECTED) {
                            sleep = 2*1000L;
                        } else if (status == BtStatus.OFF) {
                            sleep = 15*1000L;
                        }
                        connectDevice();
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                    btCleanup();
                }
                try {
                    Thread.sleep(sleep);
                } catch (InterruptedException e) {
                }
            }
            try {
                mBtSocket.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
            Log.d(TAG, "stop doing stuff");
        }
    };

    private void btCleanup() {
        try {
            mBtSocket.close();
        } catch (IOException e) {}
        mBtSocket = null;
    }

    private boolean connectDevice() {
        Log.d(TAG, "connecting");
        BluetoothAdapter myAdapter = BluetoothAdapter.getDefaultAdapter();
        if(myAdapter.isEnabled() == false) {
            myAdapter.enable();
            return false;
        }
        BluetoothDevice remoteDevice = myAdapter.getRemoteDevice(DEVICE);
        try {
            mBtSocket = remoteDevice.createRfcommSocketToServiceRecord(UUID.fromString(BASE_UUID));
            mBtSocket.connect();
        } catch (IOException e) {
            e.printStackTrace();
            btCleanup();
            return false;
        }
        return true;
    }

    private BroadcastReceiver btReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            Log.d(TAG, "Bluetoothchanged");
            if (intent.getIntExtra(BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.STATE_OFF) ==
                BluetoothAdapter.STATE_ON) {
                connectDevice();
            }
        }
    };
}
